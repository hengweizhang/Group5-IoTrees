#include "arduino_secrets.h"

/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/220bf1eb-6144-47c8-8add-2f7b641606f9 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  CloudTemperatureSensor air_temperature;
  CloudIlluminance brightness;
  bool container_refill;
  CloudRelativeHumidity air_humidity;
  CloudRelativeHumidity soil_humidity;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/
#include "thingProperties.h"
#include <DHT.h>
//#include <DHT_U.h>
// DHT11 - Version: 2.0.0

//Defines
//Pins
#define DHTPIN 6  //D6 DHT digital
#define DHTTYPE DHT11
#define SOILPIN 17        //A0/D17 Soil Humidity Analog input
#define MOTORPIN 23       //A6/D23 Motor  Analog Output
#define BRIGHTNESSPIN 20  //A3/D20 Photosensor Analog Input
#define HEARTBEATPIN 13   //D13 Hearbeat

//Sensors
// Values need to be adapted based on opservations
#define BRIGHTNESS_LOW 3800      // Define min value we consider brightness 'low'
#define BRIGHTNESS_HIGH 15    // Define max value we consider brightness 'high'
#define WETSOIL (1700+500)            // Define limit value we consider soil 'wet' 1700 max is 4095
#define DRYSOIL (3000)            // Define limit value we consider soil 'dry' 
#define UPDATEPERIOD    1000      //Time periode between readings in ms
#define WATERINGPERIOD 600000  //Time period between watering actions 10min = 600000ms
#define WATERING_TIME 30000  //Maximum Time Period that pump runs until shutdown 30 sec = 30000 ms
#define FLOWRATE        300    //cm^3/s
#define CONTAINERVOLUME 12000    //cm^3

//Variables
// CloudUpdateVariabls
/*
 CloudTemperatureSensor air_temperature;   CloudIlluminance brightness;    bool container_refill;   CloudRelativeHumidity air_humidity;   CloudRelativeHumidity soil_humidity;
*/
//IOT
int wifiStatus = 0;   //1 = ok, 0 = error
int cloudStatus = 0;  //1 = ok, 0 = error
unsigned long previousMillis = 0;

//DHT
DHT dht(DHTPIN, DHTTYPE);

//Motor
unsigned long previousMillisMotor = 0;
int container_content = CONTAINERVOLUME; //Volume in cm^3

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500);

  //initiate Pins
  //D6 DHT digital
  //D17 Soil Humidity Analog input
  // D20 Photosensor Analog Input
  //D23 Motor  Analog Output
  pinMode(SOILPIN, INPUT);
  pinMode(BRIGHTNESSPIN, INPUT);
  pinMode(MOTORPIN, OUTPUT);
  pinMode(HEARTBEATPIN, OUTPUT);

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);

  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();

  //USER CODE
  dht.begin();
}

void loop() {
  ArduinoCloud.update();
  // Your code here
  //do every action periodically
  unsigned long currentMillis = millis();

  if (currentMillis - previousMillis >= UPDATEPERIOD) {
    // Measuring data
    previousMillis = currentMillis;
    air_temperature = dht.readTemperature();
    air_humidity = dht.readHumidity();
    soil_humidity = analogRead(SOILPIN);
    brightness = analogRead(BRIGHTNESSPIN);

    //Soil Moisture Measurement
    // Determine status of our soil
    Serial.print(F("\n Soil Humidity: "));
    Serial.print(soil_humidity);

    //Wet soil
    if (soil_humidity < WETSOIL) {
      Serial.println("\n Status: Soil is too wet");
      //Turn motor off
      analogWrite(MOTORPIN, 0);
      container_content = container_content - (currentMillis - previousMillis) *FLOWRATE; // V = V_0 - s*dV
    } else if (soil_humidity >= WETSOIL && soil_humidity < DRYSOIL) {
      //Perfect soil humidity
      Serial.println("\n Status: Soil humidity is perfect");
      //Turn motor off
      analogWrite(MOTORPIN, 0);
      container_content = container_content - (currentMillis - previousMillis) *FLOWRATE; // V = V_0 - s*dV
    } else {
      //start watering motor for some time to make it more humid
      Serial.println("\n Status: Soil is too dry - time to water!");

      if ( (currentMillis - previousMillisMotor) >= WATERING_TIME ) {
        Serial.println("\n Maximum Watering Time Exceeded, Initiating Shutdown!");
        analogWrite(MOTORPIN, 0);
        container_content = 0;
        container_refill = 0;
      }

      //value: the duty cycle: between 0 (always off) and 255 (always on). Allowed data types: int. //DAC 10-bit 1023
      if (currentMillis - previousMillisMotor >= WATERINGPERIOD && container_content > 0) {
        previousMillisMotor = currentMillis;
        //Turn motor on
        analogWrite(MOTORPIN, 1023);
        //delay(100);                     //Time for motor to operate in ms = 3000ms
        //analogWrite(MOTORPIN, 0);
      }else if(container_content <= 0){
        container_refill = 0;
      }
    }   

    Serial.print(F("\n  Soil Humidity: "));
    Serial.print(soil_humidity);
    soil_humidity = map(4095 - soil_humidity, 0, 4095, 0, 100);
    Serial.print(F("\n Mapped Soil Humidity: "));
    Serial.print(soil_humidity);   //Map humidity //TODO TEST limits
    
    Serial.print(F("\n Container Content in cm^3:"));
    Serial.print(container_content);

    //Brightness Measurement
    Serial.print(F("\n Brightness: "));     //TODO REMOVE AFTER CALIBRATION
    Serial.print(brightness);             //REMOVE AFTER CALIBRATION
    brightness = map(BRIGHTNESS_LOW - brightness, BRIGHTNESS_HIGH, BRIGHTNESS_LOW, 0, 100);
    Serial.print(F("\n Mapped Brightness: "));
    Serial.print(brightness); 

    //Humidity and Temperature Measurement
    Serial.print(F("\n Humidity: "));
    Serial.print(air_humidity);
    Serial.print(F("%  Temperature: "));
    Serial.print(air_temperature);
    Serial.print(F("\n"));

    //Heartbeat
    digitalWrite(HEARTBEATPIN, !digitalRead(HEARTBEATPIN));
  }
}
/*
  Since ContainerRefill is READ_WRITE variable, onContainerRefillChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onContainerRefillChange()  {
  // Add your code here to act upon ContainerRefill change
  Serial.println("\n Container refill: ");
  if(container_refill == 1){  //TODO
    container_content == CONTAINERVOLUME;
    Serial.println("correct");
  }else{
    Serial.println("wrong");
  }
}